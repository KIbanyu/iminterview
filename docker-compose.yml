version: '3'
services:

  postgresql:
    image: postgres:15
    container_name: im_database
    expose:
      - "5433"
    ports:
      - "5433:5433"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=im_database
      - POSTGRES_HOST=5433
    command: -p 5433
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks: [ "im" ]

  kafka:
    image: docker.io/bitnami/kafka:3.5.0
    expose:
      - "9092"
    ports:
      - "9092:9092"
    volumes:
      - "./kafka_data:/bitnami"
    restart: always
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,CONTROLLER://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_MESSAGE_MAX_BYTES=200000000
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=200000000
    networks: [ "im" ]

  keycloak:
   image: quay.io/keycloak/keycloak:22.0.1
   container_name: keycloak
   environment:
     KEYCLOAK_ADMIN: admin
     KEYCLOAK_ADMIN_PASSWORD: admin
   ports:
     - "8080:8080"
   command: start-dev
   networks: [ "im" ]

  discovery-service:
    container_name: discovery-service
    image: discovery-service:latest
    expose:
      - "9090"
    ports:
      - "9090:9090"
    networks: [ "im" ]

  customer-service:
    container_name: customer-service
    build:
      context: ./account-service
      dockerfile: Dockerfile
      args:
        SKIP_TESTS: "true"
    image: customer-service:latest
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - PORT=8081
    expose:
      - "8081"  
    ports:
      - "8081:8081"
    depends_on:
      - discovery-service
    networks: [ "im" ]

  account-service:
    container_name: account-service
    image: account-service:latest
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - PORT=8082
    ports:
      - "8082:8082"
    depends_on:
      - discovery-service
    networks: [ "im" ]

  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
      args:
        SKIP_TESTS: "true"
    container_name: transaction-service
    image: transaction-service:latest
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka
      - PORT=8083
    ports:
      - "8083:8083"
    depends_on:
      - discovery-service
    networks: ["im"] 


  notification-service:
    container_name: notification-service
    image: notification-service:latest
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    ports:
      - "8084:8084"
    networks: ["im"] 

networks:
  im:
    driver: bridge
